*** STM32F042F6Px_FLASH.ld	Sat Sep 21 21:47:11 2024
--- STM32F042F6Px_FLASH.ld.fixed	Sat Sep 21 21:47:59 2024
***************
*** 53,59 ****
  ENTRY(Reset_Handler)
  
  /* Highest address of the user mode stack */
! _estack = ORIGIN() + LENGTH();    /* end of RAM */
  /* Generate a link error if heap and stack don't fit into RAM */
  _Min_Heap_Size = 0x200;      /* required amount of heap  */
  _Min_Stack_Size = 0x400; /* required amount of stack */
--- 53,59 ----
  ENTRY(Reset_Handler)
  
  /* Highest address of the user mode stack */
! _estack = ORIGIN(RAM) + LENGTH(RAM);    /* end of RAM */
  /* Generate a link error if heap and stack don't fit into RAM */
  _Min_Heap_Size = 0x200;      /* required amount of heap  */
  _Min_Stack_Size = 0x400; /* required amount of stack */
***************
*** 143,149 ****
  
      . = ALIGN(4);
      _edata = .;        /* define a global symbol at data end */
!   } > AT> FLASH
  
    
    /* Uninitialized data section */
--- 143,149 ----
  
      . = ALIGN(4);
      _edata = .;        /* define a global symbol at data end */
!   } >RAM AT> FLASH
  
    
    /* Uninitialized data section */
***************
*** 160,166 ****
      . = ALIGN(4);
      _ebss = .;         /* define a global symbol at bss end */
      __bss_end__ = _ebss;
!   } >
  
    /* User_heap_stack section, used to check that there is enough RAM left */
    ._user_heap_stack :
--- 160,166 ----
      . = ALIGN(4);
      _ebss = .;         /* define a global symbol at bss end */
      __bss_end__ = _ebss;
!   } >RAM
  
    /* User_heap_stack section, used to check that there is enough RAM left */
    ._user_heap_stack :
***************
*** 171,177 ****
      . = . + _Min_Heap_Size;
      . = . + _Min_Stack_Size;
      . = ALIGN(8);
!   } >
  
    
  
--- 171,177 ----
      . = . + _Min_Heap_Size;
      . = . + _Min_Stack_Size;
      . = ALIGN(8);
!   } >RAM
  
    
  
***************
*** 183,188 ****
--- 183,189 ----
      libgcc.a ( * )
    }
  
+   .ARM.attributes 0 : { *(.ARM.attributes) }
  }
  
  
